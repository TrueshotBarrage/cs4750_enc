<!-- You need to wrap all content inside the launch tag -->
<launch>
    <!--
        ROS launch files accept arguments using the arg tag.
        It allows you to pass arguments in from the command
        line (or from other launch files)
    -->
    <arg name="test_number" default="1001" />
    <arg name="palindrome_output_topic" default="/introduction/palindrome_output" />
    <!--
        To change the argument at run time from the command line
        $ roslaunch introduction fibonacci.launch index:=1
    -->

    <!--
        The node tag denotes a single ROS node to be launched.
        It needs three attributes:
           pkg specifies where to find the executable for the node
           type specifies the name of the executable
           name specifies the name of the node, so other nodes can refer to your node
        For Python scripts, the name of the executable is the name of the file in the scripts directory
    -->
    <node pkg="introduction" type="palindrome" name="palindrome" output="screen">
        <!--
            Define the parameters for the node using the param tag
            param is different from arg: args are only used by roslaunch
            to allow the user to provide custom values to the launch file,
            params become available to the ROS system once it's running.
            It is often convenient to use the same names for args and
            params that hold the same value. We use different names here
            to highlight their differences.
        -->
        <param name="output_topic" value="$(arg palindrome_output_topic)" />
        <!--
            Create a ROS parameter for the Fibonacci index,
            using the launch file argument from above.
        -->
	<!-- BEGIN QUESTION 1.3 -->
        <param name="test_number" value ="$(arg test_number)" />
	<!-- END QUESTION 1.3 -->
    </node>
</launch>
